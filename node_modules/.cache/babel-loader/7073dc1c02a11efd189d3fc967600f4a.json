{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl,{headers:{'Service-Worker':'script'}}).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();}).catch(function(error){console.error(error.message);});}}","map":{"version":3,"sources":["/home/egichuki/proj/portfolio/App/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register( config ) {\n    if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL( process.env.PUBLIC_URL, window.location.href );\n\n        if ( publicUrl.origin !== window.location.origin ) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener( 'load', () => {\n            const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n            if ( isLocalhost ) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker( swUrl, config );\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then( () => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                } );\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW( swUrl, config );\n            }\n        } );\n    }\n}\n\nfunction registerValidSW( swUrl, config ) {\n    navigator.serviceWorker.register( swUrl ).then( registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n\n            if ( installingWorker == null ) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if ( installingWorker.state === 'installed' ) {\n                    if ( navigator.serviceWorker.controller ) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                        );\n\n                        // Execute callback\n                        if ( config && config.onUpdate ) {\n                            config.onUpdate( registration );\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log( 'Content is cached for offline use.' );\n\n                        // Execute callback\n                        if ( config && config.onSuccess ) {\n                            config.onSuccess( registration );\n                        }\n                    }\n                }\n            };\n        };\n    } ).catch( error => {\n        console.error( 'Error during service worker registration:', error );\n    } );\n}\n\nfunction checkValidServiceWorker( swUrl, config ) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch( swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    } ).then( response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get( 'content-type' );\n\n        if (\n            response.status === 404 ||\n            ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n        ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then( registration => {\n                registration.unregister().then( () => {\n                    window.location.reload();\n                } );\n            } );\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW( swUrl, config );\n        }\n    } ).catch( () => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n    } );\n}\n\nexport function unregister() {\n    if ( 'serviceWorker' in navigator ) {\n        navigator.serviceWorker.ready.then( registration => {\n            registration.unregister();\n        } ).catch( error => {\n            console.error( error.message );\n        } );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}