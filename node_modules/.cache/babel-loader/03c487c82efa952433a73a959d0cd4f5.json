{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost = Boolean(window.location.hostname === 'localhost' || // [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' || // 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    var publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', function () {\n      var swUrl = \"\".concat(process.env.PUBLIC_URL, \"/service-worker.js\");\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config); // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n\n        navigator.serviceWorker.ready.then(function () {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(function (registration) {\n    registration.onupdatefound = function () {\n      var installingWorker = registration.installing;\n\n      if (installingWorker == null) {\n        return;\n      }\n\n      installingWorker.onstatechange = function () {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'); // Execute callback\n\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.'); // Execute callback\n\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(function (error) {\n    console.error('Error during service worker registration:', error);\n  });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(function (response) {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    var contentType = response.headers.get('content-type');\n\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(function (registration) {\n        registration.unregister().then(function () {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(function () {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(function (registration) {\n      registration.unregister();\n    }).catch(function (error) {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"sources":["/home/egichuki/proj/portfolio/App/src/serviceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"mappings":"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","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register( config ) {\n    if ( process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator ) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL( process.env.PUBLIC_URL, window.location.href );\n\n        if ( publicUrl.origin !== window.location.origin ) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener( 'load', () => {\n            const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n            if ( isLocalhost ) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker( swUrl, config );\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then( () => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                } );\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW( swUrl, config );\n            }\n        } );\n    }\n}\n\nfunction registerValidSW( swUrl, config ) {\n    navigator.serviceWorker.register( swUrl ).then( registration => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n\n            if ( installingWorker == null ) {\n                return;\n            }\n            installingWorker.onstatechange = () => {\n                if ( installingWorker.state === 'installed' ) {\n                    if ( navigator.serviceWorker.controller ) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                        );\n\n                        // Execute callback\n                        if ( config && config.onUpdate ) {\n                            config.onUpdate( registration );\n                        }\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log( 'Content is cached for offline use.' );\n\n                        // Execute callback\n                        if ( config && config.onSuccess ) {\n                            config.onSuccess( registration );\n                        }\n                    }\n                }\n            };\n        };\n    } ).catch( error => {\n        console.error( 'Error during service worker registration:', error );\n    } );\n}\n\nfunction checkValidServiceWorker( swUrl, config ) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch( swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    } ).then( response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get( 'content-type' );\n\n        if (\n            response.status === 404 ||\n            ( contentType != null && contentType.indexOf( 'javascript' ) === -1 )\n        ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then( registration => {\n                registration.unregister().then( () => {\n                    window.location.reload();\n                } );\n            } );\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW( swUrl, config );\n        }\n    } ).catch( () => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n    } );\n}\n\nexport function unregister() {\n    if ( 'serviceWorker' in navigator ) {\n        navigator.serviceWorker.ready.then( registration => {\n            registration.unregister();\n        } ).catch( error => {\n            console.error( error.message );\n        } );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}